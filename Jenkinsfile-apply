pipeline{
    agent any
    environment{
        AWS_DEFAULT_REGION = "us-east-1"
    }
    stages {
        stage('download tfplan artifacts'){
            steps{
                echo "downloading artifacts"
                copyArtifacts(
                    projectName: 'terraform-ci-cd-pipeline',
                    selector: lastSuccessful()
                )
                sh 'ls -l'
            }
        }

        stage('Terraform Apply'){
            steps{
                echo "applying terraform"
                withCredentials([
                    string(credentialsId:'aws-access-key', variable:'AWS_ACCESS_KEY_ID'),
                    string(credentialsId:'aws-secret-key', variable:'AWS_SECRET_ACCESS_KEY')
                ]) {
                  //sh 'terraform init -input=false' // re-initialize terraform
                  sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
        
        stage('Approval for Destroy') {
            steps {
                script {
                    try {
                        input message: 'Do you want to destroy the infrastructure?', ok: 'Yes, Destroy!'
                        env.DESTROY_OK = "true"
                    } catch (e) {
                        echo "Destroy rejected by user. Skipping destroy stage."
                        env.DESTROY_OK = "false"
                    }
                }
            }
        }

        stage ('terraform destroy'){
            when {
                expression { env.DESTROY_OK == "true" }
            }
            steps{
                echo "destroying terraform infrastructure"
                withCredentials([
                    string(credentialsId:'aws-access-key', variable:'AWS_ACCESS_KEY_ID'),
                    string(credentialsId:'aws-secret-key', variable:'AWS_SECRET_ACCESS_KEY')
                ]) {
                  sh 'terraform destroy -auto-approve'
                }
            }
        }
    }
    post ('archiving tfstate file'){
        always {
            archiveArtifacts artifacts: 'terraform.tfstate', fingerprint: true, onlyIfSuccessful: true
        }
    }
}